package org.fenixedu.applicationtracking.ui;

import org.fenixedu.applicationtracking.domain.Actor;
import org.fenixedu.applicationtracking.domain.Application;
import org.fenixedu.applicationtracking.domain.ApplicationTrackingDomainException;
import org.fenixedu.applicationtracking.domain.Period;
import org.fenixedu.bennu.core.domain.exceptions.DomainException;
import org.fenixedu.bennu.core.util.CoreConfiguration;
import org.fenixedu.commons.i18n.I18N;
import org.springframework.ui.Model;
import pt.ist.fenixframework.FenixFramework;

import java.util.Optional;

/**
 * Utility class to be extended only within the Application Tracking Module,
 * providing utility methods to lookup and store applications and periods.
 */
public abstract class BaseApplicationController {

    /**
     * Looks up the {@link Period} with the given slug.
     * <p/>
     * Throws a {@link DomainException} if not found.
     *
     * @param slug The slug to lookup
     * @return The period with the given slug
     * @throws DomainException If no period was found
     */
    protected Period extractPeriod(String slug) {
        Optional<Period> period = Period.fromSlug(slug);
        if (!period.isPresent()) {
            throw ApplicationTrackingDomainException.periodNotFound(slug);
        }
        return period.get();
    }

    /**
     * Looks up the {@link Period} with the given slug, and stores it in the provided model.
     * <p/>
     * Throws a {@link DomainException} if not found.
     *
     * @param model The model in which to store the period
     * @param slug  The slug to lookup
     * @return The period with the given slug
     * @throws DomainException If no period was found
     */
    protected Period savePeriod(Model model, String slug) {
        Period period = extractPeriod(slug);
        model.addAttribute("period", period);
        return period;
    }

    /**
     * Returns the public URL with which the given actor may access the application.
     *
     * @param actor The actor for which to return the URL
     * @return The public URL for the given actor
     */
    protected String publicUrlFor(Actor actor) {
        return CoreConfiguration.getConfiguration().applicationUrl() + "/public-applications/"
                + actor.getApplication().getPeriod().getSlug() + "/application/" + actor.getApplication().getNumber() + "@"
                + actor.getSecret();
    }

    /**
     * Returns the public URL with which the applicant of the given application may access the application.
     *
     * @param application The application for which to return the URL
     * @return The public URL for the application's applicant
     */
    protected String publicUrlForApplicant(Application application) {
        return publicUrlFor(application.getApplicant());
    }

    /**
     * Returns the {@link Actor} associated with the given slug, within the given period.
     * <p/>
     * The slug must have been generated by the {@link #publicUrlFor(Actor)} or
     * {@link #publicUrlForApplicant(Application)} methods.
     *
     * @param period The period in which to look up the application
     * @param slug   The slug identifying the actor
     * @return The actor with the given slug, within the given period
     * @throws DomainException If no application or Actor were found with the given slug
     */
    protected Actor extractActor(Period period, String slug) {
        String[] parts = slug.split("@");
        if (parts.length != 2) {
            throw ApplicationTrackingDomainException.applicationNotFound(slug);
        }
        Optional<Actor> application = period.findApplication(parts[0]).flatMap(app -> app.findActor(parts[1]));
        if (!application.isPresent()) {
            throw ApplicationTrackingDomainException.applicationNotFound(slug);
        }
        Actor actor = application.get();
        // Reset the Actor's preferred locale, if it differs from the current one
        if (!I18N.getLocale().equals(actor.getLocale())) {
            FenixFramework.atomic(() -> actor.setLocale(I18N.getLocale()));
        }
        return actor;
    }

    /**
     * Looks up the actor associated with the given slug, and stores it in the provided model.
     *
     * @param model       The model in which to store the period
     * @param period      The slug of the selected period
     * @param application The slug identifying the actor
     * @return The actor with the given slug, within the given period
     * @throws DomainException If no application or Actor were found with the given slug
     */
    protected Actor saveActor(Model model, String period, String application) {
        Period p = extractPeriod(period);
        Actor actor = extractActor(p, application);
        model.addAttribute("period", p);
        model.addAttribute("application", actor.getApplication());
        model.addAttribute("actor", actor);
        return actor;
    }

}
